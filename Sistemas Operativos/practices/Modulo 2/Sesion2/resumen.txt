EJERCICIO1::umask por defecto es de 0022

    S_IXUSR->00100->ejecución/búsqueda para el propietario (=S_IEXEC no POSIX)
    S_IRWXG->00070->group tiene permisos de lectura, escritura y ejecución
    S_IRGRP->00040->lectura para el grupo
    S_IWGRP->00020->escritura para el grupo
    S_IXGRP->00010->ejecución/búsqueda para el grupo
    S_IRWXO->00007->other tienen permisos de lectura, escritura y ejecución
    S_IROTH->00004->lectura para otros
    S_IWOTH->00002->escritura para otros
    S_IXOTH->00001->ejecución/búsqueda para otros
    S_ISUID->04000->activar la asignación del UID del propietario al UID efectivo del proceso que ejecute el archivo.
    S_ISGID->02000->activar la asignación del GID del propietario al GID efectivo del proceso que ejecute el archivo.
    S_ISVTX->01000->activar sticky bit. En directorios significa un borrado restringido, es decir, un proceso no privilegiado no puede borrar o renombrar archivos del directorio salvo que tenga permiso de escritura y sea propietario. Por ejemplo se utiliza en el directorio /tmp.
    S_IRWXU->00700->user (propietario del archivo) tiene permisos de lectura, escritura y ejecución
    S_IRUSR->00400->lectura para el propietario (= S_IREAD no POSIX)
    S_IWUSR->00200->escritura para el propietario (= S_IWRITE no POSIX)

EJERCICIO2::manejo de directorios
    
    DIR *d;
    long indice;

    opendir(pathname)->abrir directorio
    readdir(d)-> lee la entrada donde esta situado el puntero de un directorio ya abierto(SE NECESITA ABRIRLO Y CERRAR CUANDO SE TERMINE).
    closedir(d)->cierra el directorio 0 exito
    seekdir(d,indice)->te citua en un directorio
    telldir(d)->devuelve la posicion del puntero
    rewinddir(d)->reinicia el dire

    ESTRUCTURAS

    DIR *opendir(char *dirname)
    struct dirent *readdir(DIR *dirp)
    int closedir(DIR *dirp)
    void seekdir(DIR *dirp, log loc)
    long telldir(DIR *dirp)
    void rewinddir(DIR *dirp)

    typedef struct _dirdesc {
        int dd_fd;
        long dd_loc;
        long dd_size;
        long dd_bbase;
        long dd_entno;
        long dd_bsize;
        char *dd_buf;
    } DIR;

    //La estructura struct dirent conforme a POSIX 2.1 es la siguiente:
    #include <sys/types.h>
    #include <dirent.h>
    struct dirent {
        long d_ino; /* número i-nodo */
        char d_name[256]; /* nombre del archivo */
    };

EJERCICIO3::mostrar i-nodo y tamaños en bloques
    similar al anterior

EJERCICIO4::nftw(pahtname, funcion, 10, 0)->return 0, en caso satisfactorio
    mirar ejercicio xD

