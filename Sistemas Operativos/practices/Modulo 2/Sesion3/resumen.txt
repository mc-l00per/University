EJERCICIO1::fork() trabajando con hijos y padres
    
    #include <unistd.h>
    #include <sys/types.h>
    pid_t getpid(void); // devuelve el PID del proceso que la invoca.
    pid_t getppid(void); // devuelve el PID del proceso padre del proceso que la invoca.
    
    uid_t getuid(void); // devuelve el identificador de usuario real del proceso que la invoca.
    uid_t geteuid(void); // devuelve el identificador de usuario efectivo del proceso que la invoca.
    
    gid_t getgid(void); // devuelve el identificador de grupo real del proceso que la invoca.
    gid_t getegid(void); // devuelve el identificador de grupo efectivo del proceso que la invoca.
    
    SYNOPSIS
       @load "fork"
           pid = fork() si da mayor que 0 bien si es == 0 es hijo
           
           ret = waitpid(pid) espera al pid
           ret = wait(); espera al padre

EJERCICIO2:: ?¿?¿

    
EJERCICIO3:: 

EJERCICIO 7:: 
#include <unistd.h>
extern char **environ;
  int execl(const char *path, const char *arg, ...);


  int execlp (const char *file, const char *arg, ...);


  int execle(const char *path, const char *arg , ..., char * const envp[]);
  
  int execv(const char *path, char *const argv[]);
  int execvp(const char *file, char *const argv[]);
