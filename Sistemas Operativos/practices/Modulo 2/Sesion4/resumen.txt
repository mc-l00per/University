EJERCICIO1:: archivos FIFO
    int mknod (const char *FILENAME, mode_t MODE, dev_t DEV)
        DEV:
         S_IFCHR: representa el valor del código de tipo de archivo para un archivo de dispositivo    orientado a caracteres.
         S_IFBLK: representa el valor del código de tipo de archivo para un archivo de dispositivo    orientado a bloques.
         S_IFSOCK: representa el valor del código de tipo de archivo para un socket.
         S_IFIFO: representa el valor del código de tipo de archivo para un FIFO .

    int mkfifo (const char *FILENAME, mode_t MODE)

    funciona como todos los anteriores:
        open, close, read y write

    En la primera ejercicio nos importa una mierda que ejecutemos primero porque uno esperara a otro y da igual el orden.
    Por ejemplo si el productor produce un mensaje se bloquea hasta que es consumido por el consumidor, pero a la inversa pasa lo mismo. Si el consumidor pide, espera hasta que el otro se lo da. Con lo que podemos confirmar que hasta que no se produce no se puede consumir y hasta que no se ha consumido el generado no se genera otro.


EJERCICIO2:: archivos pipe
    fd[0]->cause de lectura
    fd[1]->cause de escritura
        dup(fd[]);->redirecion de cause pero necesita cierre del anterior y de la entrada del mismo
        dup2(fd[],entrada a cerrar)
            STDIN_FILENO->entrada
            STDOUT_FILENO->salida

    uno de los dos se tiene que cerrar depende de lo que se vaya hacer con ellos
        close(fd[x])

    la llamada a pipe siempre antes que fork()

    pues la actibidad dos lo que hace es cerrar el cause de lectura si es el hijo y escribir el mensaje en el cause de escritura, y continua, si es el padre por realiza lo inverso, cierra el cause de escritura y realiza la lectura del cause de lectura, que escribio o escribira su hijo

EJERCICIO3 y 4:: comunicacion interna de causes :: redirecionamiento de salida de causes y entrada
    Tienen el mismo resultado la diferencia es dup y dup2

    El segundo usa solamente la orden dup2, que hace lo mismo que las otras dos juntas en una sola orden, cerrando el descriptor antiguo y duplicando el descriptor después. Se garantiza que la llamada es atómica, por lo que si por ejemplo, si llega una señal al proceso, toda la operación transcurrirá antes de devolverle el control al núcleo para gestionar la señal.

    Así pues hemos creado un cauce en el que el proceso hijo ejecuta la orden ls y lo redirecciona al descriptor de escritura de salida deseado, no a la salida estándar, con lo cual el proceso padre, en el que también hemos redirigido la entrada para que no sea la estándar, recibe el la información de la orden que ejecutó el hijo y seguidamente ejecuta la orden sort. Con la salida que da el programa podemos comprobar que el cauce se ha efectuado correctamente.

EJERCICIO5:: mescla de todo maestro/esclavo -> documentado en el codigo

