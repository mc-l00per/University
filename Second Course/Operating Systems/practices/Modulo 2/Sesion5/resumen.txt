EJERCICIO1:: señales
    SIGHUP  Term    Desconexión del terminal (referencia a la función termio(7) del man). También se utiliza para reanudar los demonios init, httpd e inetd. Esta señal la envía un proceso padre a un proceso hijo cuando el padre finaliza.
    SIGINT      Term    Interrupción procedente del teclado (<Ctrl+C>)
    SIGQUIT     Core    Terminación procedente del teclado
    SIGILL      Core    Excepción producida por la ejecución de una instrucción ilegal
    SIGABRT     Core    Señal de aborto procedente de la llamada al sistema abort(3)
    SIGFPE      Core    Excepción de coma flotante
    SIGKILL     Term    Señal para terminar un proceso (no se puede ignorar ni manejar).
    SIGSEGV     Core    Referencia inválida a memoria
    SIGPIPE     Term    Tubería rota: escritura sin lectores
    SIGALRM     Term    Señal de alarma procedente de la llamada al sistema alarm(2)
    SIGTERM     Term    Señal de terminación
    SIGUSR1     Term    Señal definida por el usuario (1)
    SIGUSR2     Term    Señal definida por el usuario (2)
    SIGCHLD     Ign Proceso hijo terminado o parado
    SIGCONT     Cont    Reanudar el proceso si estaba parado
    SIGSTOP     Stop    Parar proceso (no se puede ignorar ni manejar).
    SIGTSTP     Stop    Parar la escritura en la tty
    SIGTTIN     Stop    Entrada de la tty para un proceso de fondo
    SIGTTOU     Stop    Salida a la tty para un proceso de fondo

        • Term La acción por defecto es terminar el proceso.
        • Ign La acción por defecto es ignorar la señal.
        • Core La acción por defecto es terminar el proceso y realizar un volcado de memoria.
        • Stop La acción por defecto es detener el proceso.


    kill, se utiliza para enviar una señal a un proceso o conjunto de procesos.
    sigaction, permite establecer la acción que realizará un proceso como respuesta a la recepción de una señal. Las únicas señales que no pueden cambiar su acción por defecto son: SIGKILL y SIGSTOP.
    
    sigprocmask, se emplea para cambiar la lista de señales bloqueadas actualmente.
    
    sigpending, permite el examen de señales pendientes (las que se han producido mientras estaban bloqueadas).
    
    sigsuspend, reemplaza temporalmente la máscara de señal para el proceso con la dada por el argumento mask y luego suspende el proceso hasta que se recibe una señal.

    #include <signal.h>
    int kill(pid_t pid, int sig)
        •   Si pid es positivo, entonces se envía la señal sig al proceso con identificador de proceso igual a pid. En este caso, se devuelve 0 si hay éxito, o un valor negativo si se produce un error.
        •   Si pid es 0, entonces sig se envía a cada proceso en el grupo de procesos del proceso actual.
        •   Si pid es igual a -1, entonces se envía la señal sig a cada proceso, excepto al primero, desde los números más altos en la tabla de procesos hasta los más bajos.
        •   Si pid es menor que -1, entonces se envía sig a cada proceso en el grupo de procesos -pid.
        •   Si sig es 0, entonces no se envía ninguna señal, pero sí se realiza la comprobación de errores.

    int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
        • signum especifica la señal y puede ser cualquier señal válida salvo SIGKILL o SIGSTOP.
        • Si act no es NULL, la nueva acción para la señal signum se instala como act.
        • Si oldact no es NULL, la acción anterior se guarda en oldact.
        0 afirmativo -1 en caso de error

        struct sigaction {
            void (*sa_handler)(int);
            void (*sa_sigaction)(int, siginfo_t *, void *);
            sigset_t sa_mask;
            int sa_flags;
            void (*sa_restorer)(void);
        }

        • sa_handler especifica la acción que se va a asociar con la señal signum pudiendo ser:
            ◦ SIG_DFL para la acción predeterminada,
            ◦ SIG_IGN para ignorar la señal
            ◦ o un puntero a una función manejadora para la señal.
        • sa_mask permite establecer una máscara de señales que deberían bloquearse durante la ejecución del manejador de la señal. Además, la señal que lance el manejador será bloqueada, a menos que se activen las opciones SA_NODEFER o SA_NOMASK.
            ◦ int sigemptyset(sigset_t *set);
                inicializa a vacío un conjunto de señales (devuelve 0 si tiene éxito y –1 en caso contrario).
            ◦ int sigfillset(sigset_t *set);
                inicializa un conjunto con todas las señales (devuelve 0 si tiene éxito y –1 en caso contrario).
            ◦ int sigismember(const sigset_t *set, int senyal);
                determina si una señal senyal pertenece a un conjunto de señales set (devuelve 1 si la señal se encuentra dentro del conjunto, y 0 en caso contrario).
            ◦ int sigaddset(sigset_t *set, int signo);
                añade una señal a un conjunto de señales set previamente inicializado (devuelve 0 si tiene éxito y –1 en caso contrario).
            ◦ int sigdelset(sigset_t *set, int signo);
                elimina una señal signo de un conjunto de señales set (devuelve 0 si tiene éxito y –1 en caso contrario).








    int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);

    int sigpending(sigset_t *set);
    int sigsuspend(const sigset_t *mask);ç







































